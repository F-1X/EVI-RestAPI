package main

import (
	firebaseRepository "advertisement-rest-api-http-service/internal/repository/firebase" // docs is generated by Swag CLI, you have to import it.
	postgresRepository "advertisement-rest-api-http-service/internal/repository/postgres"
	"advertisement-rest-api-http-service/internal/router"
	"advertisement-rest-api-http-service/internal/service"
	firebase "advertisement-rest-api-http-service/pkg/firebase"

	// "advertisement-rest-api-http-service/pkg/postgres"
	postgres "advertisement-rest-api-http-service/pkg/postgres"
	"context"
	"log"
	"os"

	"github.com/joho/godotenv"
)

func init() {
	if err := godotenv.Load(); err != nil {
		log.Fatalf("Error loading .env file: %v", err)
	}
}

//	@title			Swagger Example API
//	@version		1.0
//	@description	This is a sample server celler server.
//	@termsOfService	http://swagger.io/terms/

//	@contact.name	API Support
//	@contact.url	http://www.swagger.io/support
//	@contact.email	support@swagger.io

//	@license.name	Apache 2.0
//	@license.url	http://www.apache.org/licenses/LICENSE-2.0.html

// @host		localhost:8888
// @BasePath	/api/v1
func main() {

	ctx := context.Background()

	// chose
	// firestore
	firestoreClient, err := firebase.InitFirestoreClient(ctx, "key-firebase.json")
	if err != nil {
		log.Fatal("err: firestoreClient", err)
	}
	defer firestoreClient.Close(ctx)
	repo := firebaseRepository.NewAdRepository(firestoreClient)


	// or
	// postgres
	db, err := postgres.InitPostgresClient(ctx, os.Getenv("POSTGRES_URL"))
	if err != nil {
		log.Fatal("err:", err)
	}
	_ = repo

	adRepoPostgres := postgresRepository.NewAdRepositoryPostgres(db)

	// init service
	service := service.NewAdService(adRepoPostgres)

	// init router
	router := router.NewGinRouter()

	router.AddHandlers(service)

	router.Run(os.Getenv("SERVER_PORT"))
}
